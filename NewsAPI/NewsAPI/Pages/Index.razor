@page "/"
@inject HttpClient Http
@using ValidateSearch

@if (found)
{
    <h2>@searchFor Latest News</h2>
}
else if (topNews)
{
    <h2>Hot Latest News</h2>
}
else
{
    <h2>Latest News</h2>
}

@if (news == null)
{
    <p><em>Getting Latest News...</em></p>
}
else
{
    <div class="mb-5 d-flex justify-content-between">
        <div>
            <button class="btn btn-outline-dark" @onclick="Main">All News</button>
            <button class="btn btn-outline-dark" @onclick="Top">Hot News</button>
        </div>
        <div>
            <EditForm Model="@currentSearch" OnValidSubmit="@SubmitValidate">
                <DataAnnotationsValidator />
                <input id="searchFor" class="p-1" @bind-value="currentSearch.SearchInput" placeholder="Search for key words. . ." />
                <button class="btn btn-success" @onclick="Search">Search</button>
                <ValidationMessage For="@(()=> currentSearch.SearchInput)" />
            </EditForm>
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-sm-12">
                @foreach (var topic in news.data)
                {
                    <h5 class="font-weight-bold">@topic.title</h5>
                    <div>
                        <a href="https://@topic.source" target="_blank">Source: @topic.source</a>
                        <small>@topic.published_at</small>
                    </div>
                    <p class="mb-5">@topic.description</p>
                    <hr />
                }
            </div>
            <div class="mb-5 d-block mx-auto text-center">
                <button class="btn btn-outline-dark" @onclick="Previous">Previous</button>
                <button class="btn btn-outline-dark" @onclick="Next">Next</button>
            </div>
        </div>
    </div>
}

@code {
    private Root news;
    private const string mainUrl = "https://api.thenewsapi.com/v1/news/";
    private const string apiKey = "?api_token=kjrZiWCktIwmyvqCgqpox87RCmhIT8k0qgwyx1pW";
    private string errorMessage;
    private int pageNews = 1;
    private bool topNews;
    private bool found;
    
    //getting all news from api english only in english and starting 1st page with root property got from json to c# convertion
    private async Task GetNewsAsync()
    {
        try
        {
            news = await Http.GetFromJsonAsync<Root>(mainUrl + "all" + apiKey + "&language=en&page=" + pageNews);
            found = false;
            topNews = false;
            errorMessage = String.Empty;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    //getting hot news similar as main news, edited url
    private async Task GetTopNewsAsync()
    {
        try
        {
            news = await Http.GetFromJsonAsync<Root>(mainUrl + "top" + apiKey + "&language=en&page=" + pageNews);
            found = false;
            topNews = true;
            errorMessage = String.Empty;
        }
        catch (Exception e)
        {
            topNews = false;
            errorMessage = e.Message;
        }
    }
    //getting all news with search input from user
    private async Task GetSearchNewsAsync()
    {
        try
        {
            news = await Http.GetFromJsonAsync<Root>(mainUrl + "all" + apiKey + "&search=" + currentSearch.SearchInput + "&language=en&page=" + pageNews);
            found = true;
            topNews = false;
            errorMessage = String.Empty;
        }
        catch (Exception e)
        {
            found = false;
            errorMessage = e.Message;
        }
    }

    //displaying data on webpage as default when used
    protected override async Task OnInitializedAsync()
    {
        await GetNewsAsync();
    }
    //main news and hot news filter
    //calling all news data and updating main page
    public async void Main()
    {
        await GetNewsAsync();
        StateHasChanged();
    }
    //hot news
    public async void Top()
    {
        await GetTopNewsAsync();
        StateHasChanged();
    }
    //searched news - search function
    public async void Search()
    {
        await GetSearchNewsAsync();
        StateHasChanged();
    }

    //paginator function for all news, hot and any searched topic, cannot be lower than 1st page
    public void Previous()
    {
        if (found)
        {
            if (pageNews >= 2)
            {
                pageNews--;
            }
            else
            {
                pageNews = 1;
            }
            currentSearch = searchFor;
            Search();
            StateHasChanged();
        }
        else if (topNews)
        {
            if (pageNews >= 2)
            {
                pageNews--;
            }
            else
            {
                pageNews = 1;
            }
            Top();
            StateHasChanged();
        }
        else
        {
            if (pageNews >= 2)
            {
                pageNews--;
            }
            else
            {
                pageNews = 1;
            }
            Main();
            StateHasChanged();
        }
    }

    public void Next()
    {
        if (found)
        {
            pageNews++;
            currentSearch = searchFor;
            Search();
            StateHasChanged();
        }
        else if (topNews)
        {
            pageNews++;
            Top();
            StateHasChanged();
        }
        else
        {
            pageNews++;
            Main();
            StateHasChanged();
        }
    }

    //using c# searchvalid for input in search
    private ValidSearch currentSearch = new ValidSearch();
    private ValidSearch searchFor = null;

    private void SubmitValidate()
    {
        searchFor = currentSearch;
        currentSearch = new ValidSearch();
    }

    //api from json to c# to get properties for api calls
    public class Meta
    {
        public int found { get; set; }
        public int returned { get; set; }
        public int limit { get; set; }
        public int page { get; set; }
    }

    public class Datum
    {
        public string uuid { get; set; }
        public string title { get; set; }
        public string description { get; set; }
        public string keywords { get; set; }
        public string snippet { get; set; }
        public string url { get; set; }
        public string image_url { get; set; }
        public string language { get; set; }
        public DateTime published_at { get; set; }
        public string source { get; set; }
        public List<string> categories { get; set; }
        public object relevance_score { get; set; }
    }

    public class Root
    {
        public Meta meta { get; set; }
        public List<Datum> data { get; set; }
    }
}