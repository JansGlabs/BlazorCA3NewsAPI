@page "/"
@inject HttpClient Http

@if (found)
{
    <h2>@searchFor Latest News</h2>
}
else if (topNews)
{
    <h2>Hot Latest News</h2>
}
else
{
    <h2>Latest News</h2>
}

@if (news == null)
{
    <p><em>Getting Latest News...</em></p>
}
else
{
    <div class="mb-5 d-flex justify-content-between">
        <div>
            <button class="btn btn-outline-dark" @onclick="Main">All News</button>
            <button class="btn btn-outline-dark" @onclick="Top">Hot News</button>
        </div>
        <div>
            <input id="searchFor" class="p-1" @bind="searchFor" placeholder="Search for key words. . ." />
            <button class="btn btn-success" @onclick="Search">Search</button>
        </div>
    </div>
    <div class="container">
        @foreach (var topic in news.data)
        {
            <h5 class="font-weight-bold">@topic.title</h5>
            <div>
                <a href="https://@topic.source" target="_blank">Source: @topic.source</a>
                <small>@topic.published_at</small>
            </div>
            <p class="mb-5">@topic.description</p>
            <hr />
        }
    </div>
}

@code {
    private Root news;
    private string mainUrl = "https://api.thenewsapi.com/v1/news/";
    private string apiKey = "?api_token=kjrZiWCktIwmyvqCgqpox87RCmhIT8k0qgwyx1pW";
    private string errorMessage;
    private string searchFor;
    private bool topNews;
    private bool found;


    private async Task GetNewsAsync()
    {
        try
        {
            news = await Http.GetFromJsonAsync<Root>(mainUrl+"all"+apiKey+"&language=en");
            found = false;
            topNews = false;
            errorMessage = String.Empty;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task GetTopNewsAsync()
    {
        try
        {
            news = await Http.GetFromJsonAsync<Root>(mainUrl+"top"+apiKey+"&language=en");
            found = false;
            topNews = true;
            errorMessage = String.Empty;
        }
        catch (Exception e)
        {
            topNews = false;
            errorMessage = e.Message;
        }
    }


    private async Task GetSearchNewsAsync()
    {
        try
        {
            news = await Http.GetFromJsonAsync<Root>(mainUrl+"all"+apiKey+"&search="+searchFor);
            found = true;
            topNews = false;
            errorMessage = String.Empty;
        }
        catch (Exception e)
        {
            found = false;
            errorMessage = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetNewsAsync();
    }

    public async void Main()
    {
        await GetNewsAsync();
        StateHasChanged();
    }

    public async void Top()
    {
        await GetTopNewsAsync();
        StateHasChanged();
    }

    public async void Search()
    {
        await GetSearchNewsAsync();
        StateHasChanged();
    }

    public class Meta
    {
        public int found { get; set; }
        public int returned { get; set; }
        public int limit { get; set; }
        public int page { get; set; }
    }

    public class Datum
    {
        public string uuid { get; set; }
        public string title { get; set; }
        public string description { get; set; }
        public string keywords { get; set; }
        public string snippet { get; set; }
        public string url { get; set; }
        public string image_url { get; set; }
        public string language { get; set; }
        public DateTime published_at { get; set; }
        public string source { get; set; }
        public List<string> categories { get; set; }
        public object relevance_score { get; set; }
    }

    public class Root
    {
        public Meta meta { get; set; }
        public List<Datum> data { get; set; }
    }
}
